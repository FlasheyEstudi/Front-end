import { Component, OnInit } from '@angular/core'; // Added OnInit
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { EstadoService } from '../../services/estado.service'; // Changed import to EstadoService

@Component({
  selector: 'app-estado', // Changed selector to app-estado
  standalone: true,
  imports: [RouterModule, CommonModule, FormsModule],
  templateUrl: './estado.component.html', // Assuming you'll create estado.component.html
  styleUrl: './estado.component.css' // Assuming you'll create estado.component.css
})
export class EstadoComponent implements OnInit { // Changed class name to EstadoComponent and implemented OnInit

  estados: any[] = []; // Changed array name to estados
  nuevoEstado = { // Changed object name to nuevoEstado
    Nombre: '', // Corresponds to 'Nombre' column
    FechaRegistro: null, // Corresponds to 'FechaRegistro' column
    FechaModificacion: null // Corresponds to 'FechaModificacion' column
  };
  errorMsg: string = '';

  constructor(private estadoService: EstadoService) { // Changed service injection to EstadoService
    // The loadEstados() call is moved to ngOnInit for better practice
  }

  ngOnInit(): void {
    this.loadEstados(); // Load data when the component initializes
  }

  /**
   * Loads all states from the service.
   */
  async loadEstados() {
    this.errorMsg = ''; // Clear any previous error messages
    try {
      this.estados = await this.estadoService.getAllEstados(); // Call getAllEstados from EstadoService
      // console.log('Datos Estados', JSON.stringify(this.estados)); // Uncomment for debugging
    } catch (error: any) {
      this.errorMsg = error.message || 'Error desconocido al cargar estados.'; // Generic error message
      console.error('❌ ERROR AL CARGAR ESTADOS:', error); // Log the actual error
    }
  }

  /**
   * Refreshes the list of states.
   */
  async recargarEstados() {
    this.errorMsg = ''; // Clear any previous error messages
    try {
      this.estados = await this.estadoService.getAllEstados(); // Call getAllEstados from EstadoService
    } catch (error: any) {
      this.errorMsg = error.message || 'Error al recargar estados.'; // Generic error message
      console.error('❌ ERROR AL RECARGAR ESTADOS:', error); // Log the actual error
    }
  }

  /**
   * Saves a new state using the service.
   */
  async guardarEstado() {
    console.log('INTENTANDO GUARDAR - Original:', this.nuevoEstado); // Log data before sending

    try {
      // Prepare data to send to the backend, aligning with the Beca.Estado table
      const dataEnviar = {
        Id: 0, // Id is typically auto-generated by the backend, but included for completeness if needed
        Nombre: this.nuevoEstado.Nombre,
        // FechaRegistro and FechaModificacion are often handled by the backend
        // If you need to send them from the frontend, uncomment and set them:
        // FechaRegistro: this.nuevoEstado.FechaRegistro ? new Date(this.nuevoEstado.FechaRegistro).toISOString() : null,
        // FechaModificacion: this.nuevoEstado.FechaModificacion ? new Date(this.nuevoEstado.FechaModificacion).toISOString() : null,
      };

      console.log('DATOS A ENVIAR AL BACKEND:', dataEnviar); // Log transformed data

      const guardado = await this.estadoService.createEstado(dataEnviar); // Call createEstado from EstadoService

      console.log('RESPUESTA DEL BACKEND:', guardado); // Confirm backend response

      this.limpiarFormulario(); // Clear the form after successful save
      this.recargarEstados(); // Reload the list to show the new state
    } catch (error: any) {
      this.errorMsg = error.message || 'Error al guardar estado.'; // Generic error message
      console.error('❌ ERROR AL GUARDAR ESTADO:', error); // Log the actual error
    }
  }

  /**
   * Clears the list of states displayed.
   */
  limpiarEstados() {
    this.estados = []; // Empty the states array
    this.errorMsg = ''; // Clear error message
  }

  /**
   * Resets the form fields for a new state.
   */
  limpiarFormulario() {
    this.nuevoEstado = { // Reset nuevoEstado object
      Nombre: '',
      FechaRegistro: null,
      FechaModificacion: null
    };
    this.errorMsg = ''; // Clear error message
  }
}
